name: Bump Version

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      base_branch:
        description: 'Base branch to create PR against'
        required: true
        type: string
        default: 'main'

jobs:
  bump-version:
    name: Bump syft-flwr version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.base_branch }}
        fetch-depth: 0  # Fetch all history for tags
        token: ${{ secrets.GITHUB_TOKEN }}  # Use default token or PAT if available

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true

    - name: Setup git config
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
        git config user.name "$(gh api /users/${GITHUB_ACTOR} | jq .name -r)"

        if [ $? -ne 0 ]; then
          echo "Error: Failed to setup git config"
          exit 1
        fi

    - name: Pull latest tags
      run: |
        git fetch --tags

        if [ $? -ne 0 ]; then
          echo "Error: Failed to fetch tags"
          exit 1
        fi

    - name: Install just
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin

        if [ $? -ne 0 ]; then
          echo "Error: Failed to install just"
          exit 1
        fi

        # Verify just is installed
        just --version || { echo "Error: just not found after installation"; exit 1; }

    - name: Install dependencies
      run: |
        echo "Installing project dependencies..."
        uv sync

        if [ $? -ne 0 ]; then
          echo "Error: Failed to install dependencies"
          exit 1
        fi

        # Verify commitizen is installed
        uv run cz version || { echo "Error: commitizen not found"; exit 1; }

    - name: Create feature branch
      id: create_branch
      run: |
        NEW_BRANCH="bump-version-${{ inputs.bump_type }}-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$NEW_BRANCH"
        echo "branch=${NEW_BRANCH}" >> $GITHUB_OUTPUT
        echo "Created branch: $NEW_BRANCH"

    - name: Bump version and update notebooks
      id: version_bump
      run: |
        echo "Bumping syft-flwr ${{ inputs.bump_type }} version..."
        # This now also updates notebook dependencies automatically
        just bump ${{ inputs.bump_type }}

        if [ $? -ne 0 ]; then
          echo "Error: Version bump failed"
          exit 1
        fi

        # Get the new version for later use
        NEW_VERSION=$(git describe --tags --abbrev=0)

        if [ -z "$NEW_VERSION" ]; then
          echo "Error: Failed to get new version from git tags"
          exit 1
        fi

        echo "New version: $NEW_VERSION"
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

    - name: Push changes to feature branch
      id: push
      run: |
        # Push the feature branch with commits and tags
        git push -u origin ${{ steps.create_branch.outputs.branch }}

        if [ $? -ne 0 ]; then
          echo "Error: Failed to push changes to branch"
          exit 1
        fi

        git push origin --tags

        if [ $? -ne 0 ]; then
          echo "Error: Failed to push tags"
          exit 1
        fi

        echo "Successfully pushed version ${{ steps.version_bump.outputs.version }} to branch ${{ steps.create_branch.outputs.branch }}!"
        echo "pushed=true" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      id: create_pr
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        VERSION="${{ steps.version_bump.outputs.version }}"

        PR_TITLE="chore: bump version to ${VERSION}"
        PR_BODY="## Version Bump

        This PR bumps syft-flwr version to **${VERSION}**

        ### Changes
        - Bumped ${{ inputs.bump_type }} version
        - Updated notebook dependencies to match new version
        - Created tag ${VERSION}

        ### Checklist
        - [ ] Tests pass
        - [ ] Version number is correct
        - [ ] Notebook dependencies are updated
        - [ ] Ready to publish to PyPI

        ### Next Steps
        After merging this PR:
        1. Run the **Publish** workflow with tag \`${VERSION}\`
        2. Package will be published to PyPI
        3. GitHub release will be created automatically"

        gh pr create \
          --base "${{ inputs.base_branch }}" \
          --head "${{ steps.create_branch.outputs.branch }}" \
          --title "$PR_TITLE" \
          --body "$PR_BODY"

        if [ $? -eq 0 ]; then
          echo "Pull request created successfully!"
          PR_URL=$(gh pr view --json url -q .url)
          echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT
        else
          echo "Error: Failed to create pull request"
          exit 1
        fi

    - name: Create summary
      if: always()
      run: |
        echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version_bump.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: ${{ inputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Branch**: ${{ inputs.base_branch }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Feature Branch**: ${{ steps.create_branch.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.push.outputs.pushed }}" == "true" ] && [ -n "${{ steps.create_pr.outputs.pr_url }}" ]; then
          echo "✅ **Successfully created PR for version ${{ steps.version_bump.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request**: ${{ steps.create_pr.outputs.pr_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the PR" >> $GITHUB_STEP_SUMMARY
          echo "2. After merge, run the **Publish** workflow with tag \`${{ steps.version_bump.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Failed to create PR**" >> $GITHUB_STEP_SUMMARY
        fi